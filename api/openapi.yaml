openapi: 3.0.3
info:
  title: Widget API
  description: |
    This is a sample server for a widget API, built with Rails and the Committee gem for working with OpenAPI.
  version: 1.0.0
servers:
  - description: Production
    url: https://example.com
paths:
  /widgets:
    get:
      summary: List widgets
      description: |
        This endpoint returns a list of widgets.
      operationId: list-widgets
      responses:
        '200':
          description: successful
          headers:
            Cache-Control:
              schema:
                type: string
              description: This header declares the cacheability of the content so you can skip repeating requests.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Widget'
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
    post:
      summary: Create Widget
      operationId: create-widget
      requestBody:
        description: Widget to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Widget'
      responses:
        '201':
          description: Created
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
  /widgets/{id}:
    parameters:
      - name: id
        in: path
        description: The unique identifier of a widget.
        required: true
        schema:
          type: string
          format: uuid
    get:
      summary: Fetch widget
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Widget'
        '404':
          description: Widget not found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
    put:
      summary: Update a widget
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Widget'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Widget'
        '400':
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        '404':
          description: Widget not found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
components:
  schemas:
    Problem:
      type: object
      properties:
        title:
          type: string
          description: A short, human-readable summary of the problem.
        detail:
          type: string
          description: A human-readable explanation specific to this occurrence of the problem.
        status:
          type: integer
          description: The HTTP status code generated by the origin server for this occurrence of the problem.
        instance:
          type: string
          description: A URI reference that identifies the specific occurrence of the problem.
    Widget:
      type: object
      description: This is a widget. It has a name and a description. It can be used to demonstrate the use of components.
      properties:
        id:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
          readOnly: true
        name:
          type: string
          example: Goblin Staff of Sparks
          writeOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
        - name
